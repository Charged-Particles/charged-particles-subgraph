// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ControllerSet extends ethereum.Event {
  get params(): ControllerSet__Params {
    return new ControllerSet__Params(this);
  }
}

export class ControllerSet__Params {
  _event: ControllerSet;

  constructor(event: ControllerSet) {
    this._event = event;
  }

  get controllerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controllerId(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DepositFeeSet extends ethereum.Event {
  get params(): DepositFeeSet__Params {
    return new DepositFeeSet__Params(this);
  }
}

export class DepositFeeSet__Params {
  _event: DepositFeeSet;

  constructor(event: DepositFeeSet) {
    this._event = event;
  }

  get depositFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProtocolFeesCollected extends ethereum.Event {
  get params(): ProtocolFeesCollected__Params {
    return new ProtocolFeesCollected__Params(this);
  }
}

export class ProtocolFeesCollected__Params {
  _event: ProtocolFeesCollected;

  constructor(event: ProtocolFeesCollected) {
    this._event = event;
  }

  get assetToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feesCollected(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawStuckERC1155 extends ethereum.Event {
  get params(): WithdrawStuckERC1155__Params {
    return new WithdrawStuckERC1155__Params(this);
  }
}

export class WithdrawStuckERC1155__Params {
  _event: WithdrawStuckERC1155;

  constructor(event: WithdrawStuckERC1155) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawStuckERC20 extends ethereum.Event {
  get params(): WithdrawStuckERC20__Params {
    return new WithdrawStuckERC20__Params(this);
  }
}

export class WithdrawStuckERC20__Params {
  _event: WithdrawStuckERC20;

  constructor(event: WithdrawStuckERC20) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawStuckERC721 extends ethereum.Event {
  get params(): WithdrawStuckERC721__Params {
    return new WithdrawStuckERC721__Params(this);
  }
}

export class WithdrawStuckERC721__Params {
  _event: WithdrawStuckERC721;

  constructor(event: WithdrawStuckERC721) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawStuckEther extends ethereum.Event {
  get params(): WithdrawStuckEther__Params {
    return new WithdrawStuckEther__Params(this);
  }
}

export class WithdrawStuckEther__Params {
  _event: WithdrawStuckEther;

  constructor(event: WithdrawStuckEther) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChargedParticles__dischargeParticleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles__dischargeParticleAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles__releaseParticleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles__releaseParticleAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles extends ethereum.SmartContract {
  static bind(address: Address): ChargedParticles {
    return new ChargedParticles("ChargedParticles", address);
  }

  baseParticleMass(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "baseParticleMass",
      "baseParticleMass(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_baseParticleMass(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseParticleMass",
      "baseParticleMass(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  breakCovalentBond(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string,
    nftTokenAddress: Address,
    nftTokenId: BigInt
  ): boolean {
    let result = super.call(
      "breakCovalentBond",
      "breakCovalentBond(address,address,uint256,string,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId),
        ethereum.Value.fromAddress(nftTokenAddress),
        ethereum.Value.fromUnsignedBigInt(nftTokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_breakCovalentBond(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string,
    nftTokenAddress: Address,
    nftTokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "breakCovalentBond",
      "breakCovalentBond(address,address,uint256,string,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId),
        ethereum.Value.fromAddress(nftTokenAddress),
        ethereum.Value.fromUnsignedBigInt(nftTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  covalentBond(
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string,
    nftTokenAddress: Address,
    nftTokenId: BigInt
  ): boolean {
    let result = super.call(
      "covalentBond",
      "covalentBond(address,uint256,string,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId),
        ethereum.Value.fromAddress(nftTokenAddress),
        ethereum.Value.fromUnsignedBigInt(nftTokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_covalentBond(
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string,
    nftTokenAddress: Address,
    nftTokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "covalentBond",
      "covalentBond(address,uint256,string,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId),
        ethereum.Value.fromAddress(nftTokenAddress),
        ethereum.Value.fromUnsignedBigInt(nftTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentParticleCharge(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "currentParticleCharge",
      "currentParticleCharge(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_currentParticleCharge(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentParticleCharge",
      "currentParticleCharge(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentParticleCovalentBonds(
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string
  ): BigInt {
    let result = super.call(
      "currentParticleCovalentBonds",
      "currentParticleCovalentBonds(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId)
      ]
    );

    return result[0].toBigInt();
  }

  try_currentParticleCovalentBonds(
    contractAddress: Address,
    tokenId: BigInt,
    basketManagerId: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentParticleCovalentBonds",
      "currentParticleCovalentBonds(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(basketManagerId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentParticleKinetics(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "currentParticleKinetics",
      "currentParticleKinetics(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_currentParticleKinetics(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentParticleKinetics",
      "currentParticleKinetics(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dischargeParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ChargedParticles__dischargeParticleResult {
    let result = super.call(
      "dischargeParticle",
      "dischargeParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return new ChargedParticles__dischargeParticleResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_dischargeParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ethereum.CallResult<ChargedParticles__dischargeParticleResult> {
    let result = super.tryCall(
      "dischargeParticle",
      "dischargeParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__dischargeParticleResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  dischargeParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ChargedParticles__dischargeParticleAmountResult {
    let result = super.call(
      "dischargeParticleAmount",
      "dischargeParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );

    return new ChargedParticles__dischargeParticleAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_dischargeParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ethereum.CallResult<ChargedParticles__dischargeParticleAmountResult> {
    let result = super.tryCall(
      "dischargeParticleAmount",
      "dischargeParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__dischargeParticleAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  dischargeParticleForCreator(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): BigInt {
    let result = super.call(
      "dischargeParticleForCreator",
      "dischargeParticleForCreator(address,address,uint256,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_dischargeParticleForCreator(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dischargeParticleForCreator",
      "dischargeParticleForCreator(address,address,uint256,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  energizeParticle(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt,
    referrer: Address
  ): BigInt {
    let result = super.call(
      "energizeParticle",
      "energizeParticle(address,uint256,string,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount),
        ethereum.Value.fromAddress(referrer)
      ]
    );

    return result[0].toBigInt();
  }

  try_energizeParticle(
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt,
    referrer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "energizeParticle",
      "energizeParticle(address,uint256,string,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount),
        ethereum.Value.fromAddress(referrer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeesForDeposit(assetAmount: BigInt): BigInt {
    let result = super.call(
      "getFeesForDeposit",
      "getFeesForDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );

    return result[0].toBigInt();
  }

  try_getFeesForDeposit(assetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeesForDeposit",
      "getFeesForDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagersAddress(): Address {
    let result = super.call(
      "getManagersAddress",
      "getManagersAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getManagersAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getManagersAddress",
      "getManagersAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSettingsAddress(): Address {
    let result = super.call(
      "getSettingsAddress",
      "getSettingsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSettingsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSettingsAddress",
      "getSettingsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStateAddress(): Address {
    let result = super.call(
      "getStateAddress",
      "getStateAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getStateAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStateAddress",
      "getStateAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  releaseParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ChargedParticles__releaseParticleResult {
    let result = super.call(
      "releaseParticle",
      "releaseParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return new ChargedParticles__releaseParticleResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_releaseParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address
  ): ethereum.CallResult<ChargedParticles__releaseParticleResult> {
    let result = super.tryCall(
      "releaseParticle",
      "releaseParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__releaseParticleResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  releaseParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ChargedParticles__releaseParticleAmountResult {
    let result = super.call(
      "releaseParticleAmount",
      "releaseParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );

    return new ChargedParticles__releaseParticleAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_releaseParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    walletManagerId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ethereum.CallResult<ChargedParticles__releaseParticleAmountResult> {
    let result = super.tryCall(
      "releaseParticleAmount",
      "releaseParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(walletManagerId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__releaseParticleAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(param0: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class BaseParticleMassCall extends ethereum.Call {
  get inputs(): BaseParticleMassCall__Inputs {
    return new BaseParticleMassCall__Inputs(this);
  }

  get outputs(): BaseParticleMassCall__Outputs {
    return new BaseParticleMassCall__Outputs(this);
  }
}

export class BaseParticleMassCall__Inputs {
  _call: BaseParticleMassCall;

  constructor(call: BaseParticleMassCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BaseParticleMassCall__Outputs {
  _call: BaseParticleMassCall;

  constructor(call: BaseParticleMassCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BreakCovalentBondCall extends ethereum.Call {
  get inputs(): BreakCovalentBondCall__Inputs {
    return new BreakCovalentBondCall__Inputs(this);
  }

  get outputs(): BreakCovalentBondCall__Outputs {
    return new BreakCovalentBondCall__Outputs(this);
  }
}

export class BreakCovalentBondCall__Inputs {
  _call: BreakCovalentBondCall;

  constructor(call: BreakCovalentBondCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get basketManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get nftTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get nftTokenId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class BreakCovalentBondCall__Outputs {
  _call: BreakCovalentBondCall;

  constructor(call: BreakCovalentBondCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CovalentBondCall extends ethereum.Call {
  get inputs(): CovalentBondCall__Inputs {
    return new CovalentBondCall__Inputs(this);
  }

  get outputs(): CovalentBondCall__Outputs {
    return new CovalentBondCall__Outputs(this);
  }
}

export class CovalentBondCall__Inputs {
  _call: CovalentBondCall;

  constructor(call: CovalentBondCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get basketManagerId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get nftTokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get nftTokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CovalentBondCall__Outputs {
  _call: CovalentBondCall;

  constructor(call: CovalentBondCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CurrentParticleChargeCall extends ethereum.Call {
  get inputs(): CurrentParticleChargeCall__Inputs {
    return new CurrentParticleChargeCall__Inputs(this);
  }

  get outputs(): CurrentParticleChargeCall__Outputs {
    return new CurrentParticleChargeCall__Outputs(this);
  }
}

export class CurrentParticleChargeCall__Inputs {
  _call: CurrentParticleChargeCall;

  constructor(call: CurrentParticleChargeCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CurrentParticleChargeCall__Outputs {
  _call: CurrentParticleChargeCall;

  constructor(call: CurrentParticleChargeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CurrentParticleKineticsCall extends ethereum.Call {
  get inputs(): CurrentParticleKineticsCall__Inputs {
    return new CurrentParticleKineticsCall__Inputs(this);
  }

  get outputs(): CurrentParticleKineticsCall__Outputs {
    return new CurrentParticleKineticsCall__Outputs(this);
  }
}

export class CurrentParticleKineticsCall__Inputs {
  _call: CurrentParticleKineticsCall;

  constructor(call: CurrentParticleKineticsCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CurrentParticleKineticsCall__Outputs {
  _call: CurrentParticleKineticsCall;

  constructor(call: CurrentParticleKineticsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DischargeParticleCall extends ethereum.Call {
  get inputs(): DischargeParticleCall__Inputs {
    return new DischargeParticleCall__Inputs(this);
  }

  get outputs(): DischargeParticleCall__Outputs {
    return new DischargeParticleCall__Outputs(this);
  }
}

export class DischargeParticleCall__Inputs {
  _call: DischargeParticleCall;

  constructor(call: DischargeParticleCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class DischargeParticleCall__Outputs {
  _call: DischargeParticleCall;

  constructor(call: DischargeParticleCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DischargeParticleAmountCall extends ethereum.Call {
  get inputs(): DischargeParticleAmountCall__Inputs {
    return new DischargeParticleAmountCall__Inputs(this);
  }

  get outputs(): DischargeParticleAmountCall__Outputs {
    return new DischargeParticleAmountCall__Outputs(this);
  }
}

export class DischargeParticleAmountCall__Inputs {
  _call: DischargeParticleAmountCall;

  constructor(call: DischargeParticleAmountCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class DischargeParticleAmountCall__Outputs {
  _call: DischargeParticleAmountCall;

  constructor(call: DischargeParticleAmountCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DischargeParticleForCreatorCall extends ethereum.Call {
  get inputs(): DischargeParticleForCreatorCall__Inputs {
    return new DischargeParticleForCreatorCall__Inputs(this);
  }

  get outputs(): DischargeParticleForCreatorCall__Outputs {
    return new DischargeParticleForCreatorCall__Outputs(this);
  }
}

export class DischargeParticleForCreatorCall__Inputs {
  _call: DischargeParticleForCreatorCall;

  constructor(call: DischargeParticleForCreatorCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class DischargeParticleForCreatorCall__Outputs {
  _call: DischargeParticleForCreatorCall;

  constructor(call: DischargeParticleForCreatorCall) {
    this._call = call;
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EnergizeParticleCall extends ethereum.Call {
  get inputs(): EnergizeParticleCall__Inputs {
    return new EnergizeParticleCall__Inputs(this);
  }

  get outputs(): EnergizeParticleCall__Outputs {
    return new EnergizeParticleCall__Outputs(this);
  }
}

export class EnergizeParticleCall__Inputs {
  _call: EnergizeParticleCall;

  constructor(call: EnergizeParticleCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class EnergizeParticleCall__Outputs {
  _call: EnergizeParticleCall;

  constructor(call: EnergizeParticleCall) {
    this._call = call;
  }

  get yieldTokensAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initiator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReleaseParticleCall extends ethereum.Call {
  get inputs(): ReleaseParticleCall__Inputs {
    return new ReleaseParticleCall__Inputs(this);
  }

  get outputs(): ReleaseParticleCall__Outputs {
    return new ReleaseParticleCall__Outputs(this);
  }
}

export class ReleaseParticleCall__Inputs {
  _call: ReleaseParticleCall;

  constructor(call: ReleaseParticleCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ReleaseParticleCall__Outputs {
  _call: ReleaseParticleCall;

  constructor(call: ReleaseParticleCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ReleaseParticleAmountCall extends ethereum.Call {
  get inputs(): ReleaseParticleAmountCall__Inputs {
    return new ReleaseParticleAmountCall__Inputs(this);
  }

  get outputs(): ReleaseParticleAmountCall__Outputs {
    return new ReleaseParticleAmountCall__Outputs(this);
  }
}

export class ReleaseParticleAmountCall__Inputs {
  _call: ReleaseParticleAmountCall;

  constructor(call: ReleaseParticleAmountCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get walletManagerId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ReleaseParticleAmountCall__Outputs {
  _call: ReleaseParticleAmountCall;

  constructor(call: ReleaseParticleAmountCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get controllerId(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetDepositFeeCall extends ethereum.Call {
  get inputs(): SetDepositFeeCall__Inputs {
    return new SetDepositFeeCall__Inputs(this);
  }

  get outputs(): SetDepositFeeCall__Outputs {
    return new SetDepositFeeCall__Outputs(this);
  }
}

export class SetDepositFeeCall__Inputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositFeeCall__Outputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawERC1155Call extends ethereum.Call {
  get inputs(): WithdrawERC1155Call__Inputs {
    return new WithdrawERC1155Call__Inputs(this);
  }

  get outputs(): WithdrawERC1155Call__Outputs {
    return new WithdrawERC1155Call__Outputs(this);
  }
}

export class WithdrawERC1155Call__Inputs {
  _call: WithdrawERC1155Call;

  constructor(call: WithdrawERC1155Call) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawERC1155Call__Outputs {
  _call: WithdrawERC1155Call;

  constructor(call: WithdrawERC1155Call) {
    this._call = call;
  }
}

export class WithdrawERC721Call extends ethereum.Call {
  get inputs(): WithdrawERC721Call__Inputs {
    return new WithdrawERC721Call__Inputs(this);
  }

  get outputs(): WithdrawERC721Call__Outputs {
    return new WithdrawERC721Call__Outputs(this);
  }
}

export class WithdrawERC721Call__Inputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawERC721Call__Outputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }
}

export class WithdrawErc20Call extends ethereum.Call {
  get inputs(): WithdrawErc20Call__Inputs {
    return new WithdrawErc20Call__Inputs(this);
  }

  get outputs(): WithdrawErc20Call__Outputs {
    return new WithdrawErc20Call__Outputs(this);
  }
}

export class WithdrawErc20Call__Inputs {
  _call: WithdrawErc20Call;

  constructor(call: WithdrawErc20Call) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawErc20Call__Outputs {
  _call: WithdrawErc20Call;

  constructor(call: WithdrawErc20Call) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}
