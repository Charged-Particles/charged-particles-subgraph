// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    ethereum,
    JSONValue,
    TypedMap,
    Entity,
    Bytes,
    Address,
    BigInt
  } from "@graphprotocol/graph-ts";
  
  export class AaveBridgeSet extends ethereum.Event {
    get params(): AaveBridgeSet__Params {
      return new AaveBridgeSet__Params(this);
    }
  }
  
  export class AaveBridgeSet__Params {
    _event: AaveBridgeSet;
  
    constructor(event: AaveBridgeSet) {
      this._event = event;
    }
  
    get aaveBridge(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class ChargedSettingsSet extends ethereum.Event {
    get params(): ChargedSettingsSet__Params {
      return new ChargedSettingsSet__Params(this);
    }
  }
  
  export class ChargedSettingsSet__Params {
    _event: ChargedSettingsSet;
  
    constructor(event: ChargedSettingsSet) {
      this._event = event;
    }
  
    get settings(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class ControllerSet extends ethereum.Event {
    get params(): ControllerSet__Params {
      return new ControllerSet__Params(this);
    }
  }
  
  export class ControllerSet__Params {
    _event: ControllerSet;
  
    constructor(event: ControllerSet) {
      this._event = event;
    }
  
    get controller(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class ExecutorSet extends ethereum.Event {
    get params(): ExecutorSet__Params {
      return new ExecutorSet__Params(this);
    }
  }
  
  export class ExecutorSet__Params {
    _event: ExecutorSet;
  
    constructor(event: ExecutorSet) {
      this._event = event;
    }
  
    get executor(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class NewSmartWallet extends ethereum.Event {
    get params(): NewSmartWallet__Params {
      return new NewSmartWallet__Params(this);
    }
  }
  
  export class NewSmartWallet__Params {
    _event: NewSmartWallet;
  
    constructor(event: NewSmartWallet) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get smartWallet(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get creator(): Address {
      return this._event.parameters[3].value.toAddress();
    }
  
    get annuityPct(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class OwnershipTransferred extends ethereum.Event {
    get params(): OwnershipTransferred__Params {
      return new OwnershipTransferred__Params(this);
    }
  }
  
  export class OwnershipTransferred__Params {
    _event: OwnershipTransferred;
  
    constructor(event: OwnershipTransferred) {
      this._event = event;
    }
  
    get previousOwner(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get newOwner(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  }
  
  export class PausedStateSet extends ethereum.Event {
    get params(): PausedStateSet__Params {
      return new PausedStateSet__Params(this);
    }
  }
  
  export class PausedStateSet__Params {
    _event: PausedStateSet;
  
    constructor(event: PausedStateSet) {
      this._event = event;
    }
  
    get isPaused(): boolean {
      return this._event.parameters[0].value.toBoolean();
    }
  }
  
  export class ValidRewardsTokenSet extends ethereum.Event {
    get params(): ValidRewardsTokenSet__Params {
      return new ValidRewardsTokenSet__Params(this);
    }
  }
  
  export class ValidRewardsTokenSet__Params {
    _event: ValidRewardsTokenSet;
  
    constructor(event: ValidRewardsTokenSet) {
      this._event = event;
    }
  
    get rewardsToken(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get state(): boolean {
      return this._event.parameters[1].value.toBoolean();
    }
  }
  
  export class WalletDischarged extends ethereum.Event {
    get params(): WalletDischarged__Params {
      return new WalletDischarged__Params(this);
    }
  }
  
  export class WalletDischarged__Params {
    _event: WalletDischarged;
  
    constructor(event: WalletDischarged) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get creatorAmount(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class WalletDischargedForCreator extends ethereum.Event {
    get params(): WalletDischargedForCreator__Params {
      return new WalletDischargedForCreator__Params(this);
    }
  }
  
  export class WalletDischargedForCreator__Params {
    _event: WalletDischargedForCreator;
  
    constructor(event: WalletDischargedForCreator) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get creator(): Address {
      return this._event.parameters[3].value.toAddress();
    }
  
    get receiverAmount(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class WalletEnergized extends ethereum.Event {
    get params(): WalletEnergized__Params {
      return new WalletEnergized__Params(this);
    }
  }
  
  export class WalletEnergized__Params {
    _event: WalletEnergized;
  
    constructor(event: WalletEnergized) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get assetAmount(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  
    get yieldTokensAmount(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class WalletReleased extends ethereum.Event {
    get params(): WalletReleased__Params {
      return new WalletReleased__Params(this);
    }
  }
  
  export class WalletReleased__Params {
    _event: WalletReleased;
  
    constructor(event: WalletReleased) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get receiver(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get assetToken(): Address {
      return this._event.parameters[3].value.toAddress();
    }
  
    get principalAmount(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  
    get creatorAmount(): BigInt {
      return this._event.parameters[5].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._event.parameters[6].value.toBigInt();
    }
  }
  
  export class WalletRewarded extends ethereum.Event {
    get params(): WalletRewarded__Params {
      return new WalletRewarded__Params(this);
    }
  }
  
  export class WalletRewarded__Params {
    _event: WalletRewarded;
  
    constructor(event: WalletRewarded) {
      this._event = event;
    }
  
    get contractAddress(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get receiver(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  
    get rewardsToken(): Address {
      return this._event.parameters[3].value.toAddress();
    }
  
    get rewardsAmount(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class WithdrawStuckERC1155 extends ethereum.Event {
    get params(): WithdrawStuckERC1155__Params {
      return new WithdrawStuckERC1155__Params(this);
    }
  }
  
  export class WithdrawStuckERC1155__Params {
    _event: WithdrawStuckERC1155;
  
    constructor(event: WithdrawStuckERC1155) {
      this._event = event;
    }
  
    get receiver(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenAddress(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  
    get amount(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  }
  
  export class WithdrawStuckERC20 extends ethereum.Event {
    get params(): WithdrawStuckERC20__Params {
      return new WithdrawStuckERC20__Params(this);
    }
  }
  
  export class WithdrawStuckERC20__Params {
    _event: WithdrawStuckERC20;
  
    constructor(event: WithdrawStuckERC20) {
      this._event = event;
    }
  
    get receiver(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenAddress(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  }
  
  export class WithdrawStuckERC721 extends ethereum.Event {
    get params(): WithdrawStuckERC721__Params {
      return new WithdrawStuckERC721__Params(this);
    }
  }
  
  export class WithdrawStuckERC721__Params {
    _event: WithdrawStuckERC721;
  
    constructor(event: WithdrawStuckERC721) {
      this._event = event;
    }
  
    get receiver(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get tokenAddress(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  }
  
  export class WithdrawStuckEther extends ethereum.Event {
    get params(): WithdrawStuckEther__Params {
      return new WithdrawStuckEther__Params(this);
    }
  }
  
  export class WithdrawStuckEther__Params {
    _event: WithdrawStuckEther;
  
    constructor(event: WithdrawStuckEther) {
      this._event = event;
    }
  
    get receiver(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  }
  
  export class AaveWalletManagerB__dischargeResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class AaveWalletManagerB__dischargeAmountResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class AaveWalletManagerB__getInterestResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class AaveWalletManagerB__releaseResult {
    value0: BigInt;
    value1: BigInt;
    value2: BigInt;
  
    constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
      return map;
    }
  }
  
  export class AaveWalletManagerB__releaseAmountResult {
    value0: BigInt;
    value1: BigInt;
    value2: BigInt;
  
    constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
      return map;
    }
  }
  
  export class AaveWalletManagerB extends ethereum.SmartContract {
    static bind(address: Address): AaveWalletManagerB {
      return new AaveWalletManagerB("AaveWalletManagerB", address);
    }
  
    _rewardsTokenWhitelist(param0: Address): boolean {
      let result = super.call(
        "_rewardsTokenWhitelist",
        "_rewardsTokenWhitelist(address):(bool)",
        [ethereum.Value.fromAddress(param0)]
      );
  
      return result[0].toBoolean();
    }
  
    try__rewardsTokenWhitelist(param0: Address): ethereum.CallResult<boolean> {
      let result = super.tryCall(
        "_rewardsTokenWhitelist",
        "_rewardsTokenWhitelist(address):(bool)",
        [ethereum.Value.fromAddress(param0)]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    discharge(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      creatorRedirect: Address
    ): AaveWalletManagerB__dischargeResult {
      let result = super.call(
        "discharge",
        "discharge(address,address,uint256,address,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
  
      return new AaveWalletManagerB__dischargeResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_discharge(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      creatorRedirect: Address
    ): ethereum.CallResult<AaveWalletManagerB__dischargeResult> {
      let result = super.tryCall(
        "discharge",
        "discharge(address,address,uint256,address,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new AaveWalletManagerB__dischargeResult(
          value[0].toBigInt(),
          value[1].toBigInt()
        )
      );
    }
  
    dischargeAmount(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt,
      creatorRedirect: Address
    ): AaveWalletManagerB__dischargeAmountResult {
      let result = super.call(
        "dischargeAmount",
        "dischargeAmount(address,address,uint256,address,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
  
      return new AaveWalletManagerB__dischargeAmountResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_dischargeAmount(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt,
      creatorRedirect: Address
    ): ethereum.CallResult<AaveWalletManagerB__dischargeAmountResult> {
      let result = super.tryCall(
        "dischargeAmount",
        "dischargeAmount(address,address,uint256,address,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new AaveWalletManagerB__dischargeAmountResult(
          value[0].toBigInt(),
          value[1].toBigInt()
        )
      );
    }
  
    dischargeAmountForCreator(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      creator: Address,
      assetToken: Address,
      assetAmount: BigInt
    ): BigInt {
      let result = super.call(
        "dischargeAmountForCreator",
        "dischargeAmountForCreator(address,address,uint256,address,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(creator),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_dischargeAmountForCreator(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      creator: Address,
      assetToken: Address,
      assetAmount: BigInt
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "dischargeAmountForCreator",
        "dischargeAmountForCreator(address,address,uint256,address,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(creator),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    energize(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt
    ): BigInt {
      let result = super.call(
        "energize",
        "energize(address,uint256,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_energize(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "energize",
        "energize(address,uint256,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    executeForAccount(
      contractAddress: Address,
      tokenId: BigInt,
      externalAddress: Address,
      ethValue: BigInt,
      encodedParams: Bytes
    ): Bytes {
      let result = super.call(
        "executeForAccount",
        "executeForAccount(address,uint256,address,uint256,bytes):(bytes)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(externalAddress),
          ethereum.Value.fromUnsignedBigInt(ethValue),
          ethereum.Value.fromBytes(encodedParams)
        ]
      );
  
      return result[0].toBytes();
    }
  
    try_executeForAccount(
      contractAddress: Address,
      tokenId: BigInt,
      externalAddress: Address,
      ethValue: BigInt,
      encodedParams: Bytes
    ): ethereum.CallResult<Bytes> {
      let result = super.tryCall(
        "executeForAccount",
        "executeForAccount(address,uint256,address,uint256,bytes):(bytes)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(externalAddress),
          ethereum.Value.fromUnsignedBigInt(ethValue),
          ethereum.Value.fromBytes(encodedParams)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBytes());
    }
  
    getInterest(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): AaveWalletManagerB__getInterestResult {
      let result = super.call(
        "getInterest",
        "getInterest(address,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
  
      return new AaveWalletManagerB__getInterestResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_getInterest(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): ethereum.CallResult<AaveWalletManagerB__getInterestResult> {
      let result = super.tryCall(
        "getInterest",
        "getInterest(address,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new AaveWalletManagerB__getInterestResult(
          value[0].toBigInt(),
          value[1].toBigInt()
        )
      );
    }
  
    getPrincipal(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): BigInt {
      let result = super.call(
        "getPrincipal",
        "getPrincipal(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_getPrincipal(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "getPrincipal",
        "getPrincipal(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    getReserveInterestToken(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): Address {
      let result = super.call(
        "getReserveInterestToken",
        "getReserveInterestToken(address,uint256,address):(address)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
  
      return result[0].toAddress();
    }
  
    try_getReserveInterestToken(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): ethereum.CallResult<Address> {
      let result = super.tryCall(
        "getReserveInterestToken",
        "getReserveInterestToken(address,uint256,address):(address)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    getRewards(
      contractAddress: Address,
      tokenId: BigInt,
      _rewardToken: Address
    ): BigInt {
      let result = super.call(
        "getRewards",
        "getRewards(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(_rewardToken)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_getRewards(
      contractAddress: Address,
      tokenId: BigInt,
      _rewardToken: Address
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "getRewards",
        "getRewards(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(_rewardToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    getTotal(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): BigInt {
      let result = super.call(
        "getTotal",
        "getTotal(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_getTotal(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "getTotal",
        "getTotal(address,uint256,address):(uint256)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    getWalletAddressById(
      contractAddress: Address,
      tokenId: BigInt,
      param2: Address,
      param3: BigInt
    ): Address {
      let result = super.call(
        "getWalletAddressById",
        "getWalletAddressById(address,uint256,address,uint256):(address)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(param2),
          ethereum.Value.fromUnsignedBigInt(param3)
        ]
      );
  
      return result[0].toAddress();
    }
  
    try_getWalletAddressById(
      contractAddress: Address,
      tokenId: BigInt,
      param2: Address,
      param3: BigInt
    ): ethereum.CallResult<Address> {
      let result = super.tryCall(
        "getWalletAddressById",
        "getWalletAddressById(address,uint256,address,uint256):(address)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(param2),
          ethereum.Value.fromUnsignedBigInt(param3)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    isPaused(): boolean {
      let result = super.call("isPaused", "isPaused():(bool)", []);
  
      return result[0].toBoolean();
    }
  
    try_isPaused(): ethereum.CallResult<boolean> {
      let result = super.tryCall("isPaused", "isPaused():(bool)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    isReserveActive(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): boolean {
      let result = super.call(
        "isReserveActive",
        "isReserveActive(address,uint256,address):(bool)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
  
      return result[0].toBoolean();
    }
  
    try_isReserveActive(
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address
    ): ethereum.CallResult<boolean> {
      let result = super.tryCall(
        "isReserveActive",
        "isReserveActive(address,uint256,address):(bool)",
        [
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    owner(): Address {
      let result = super.call("owner", "owner():(address)", []);
  
      return result[0].toAddress();
    }
  
    try_owner(): ethereum.CallResult<Address> {
      let result = super.tryCall("owner", "owner():(address)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    release(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      creatorRedirect: Address
    ): AaveWalletManagerB__releaseResult {
      let result = super.call(
        "release",
        "release(address,address,uint256,address,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
  
      return new AaveWalletManagerB__releaseResult(
        result[0].toBigInt(),
        result[1].toBigInt(),
        result[2].toBigInt()
      );
    }
  
    try_release(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      creatorRedirect: Address
    ): ethereum.CallResult<AaveWalletManagerB__releaseResult> {
      let result = super.tryCall(
        "release",
        "release(address,address,uint256,address,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new AaveWalletManagerB__releaseResult(
          value[0].toBigInt(),
          value[1].toBigInt(),
          value[2].toBigInt()
        )
      );
    }
  
    releaseAmount(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt,
      creatorRedirect: Address
    ): AaveWalletManagerB__releaseAmountResult {
      let result = super.call(
        "releaseAmount",
        "releaseAmount(address,address,uint256,address,uint256,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
  
      return new AaveWalletManagerB__releaseAmountResult(
        result[0].toBigInt(),
        result[1].toBigInt(),
        result[2].toBigInt()
      );
    }
  
    try_releaseAmount(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      assetToken: Address,
      assetAmount: BigInt,
      creatorRedirect: Address
    ): ethereum.CallResult<AaveWalletManagerB__releaseAmountResult> {
      let result = super.tryCall(
        "releaseAmount",
        "releaseAmount(address,address,uint256,address,uint256,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(assetToken),
          ethereum.Value.fromUnsignedBigInt(assetAmount),
          ethereum.Value.fromAddress(creatorRedirect)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new AaveWalletManagerB__releaseAmountResult(
          value[0].toBigInt(),
          value[1].toBigInt(),
          value[2].toBigInt()
        )
      );
    }
  
    withdrawRewards(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      rewardsToken: Address,
      rewardsAmount: BigInt
    ): BigInt {
      let result = super.call(
        "withdrawRewards",
        "withdrawRewards(address,address,uint256,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(rewardsToken),
          ethereum.Value.fromUnsignedBigInt(rewardsAmount)
        ]
      );
  
      return result[0].toBigInt();
    }
  
    try_withdrawRewards(
      receiver: Address,
      contractAddress: Address,
      tokenId: BigInt,
      rewardsToken: Address,
      rewardsAmount: BigInt
    ): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "withdrawRewards",
        "withdrawRewards(address,address,uint256,address,uint256):(uint256)",
        [
          ethereum.Value.fromAddress(receiver),
          ethereum.Value.fromAddress(contractAddress),
          ethereum.Value.fromUnsignedBigInt(tokenId),
          ethereum.Value.fromAddress(rewardsToken),
          ethereum.Value.fromUnsignedBigInt(rewardsAmount)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  }
  
  export class ConstructorCall extends ethereum.Call {
    get inputs(): ConstructorCall__Inputs {
      return new ConstructorCall__Inputs(this);
    }
  
    get outputs(): ConstructorCall__Outputs {
      return new ConstructorCall__Outputs(this);
    }
  }
  
  export class ConstructorCall__Inputs {
    _call: ConstructorCall;
  
    constructor(call: ConstructorCall) {
      this._call = call;
    }
  }
  
  export class ConstructorCall__Outputs {
    _call: ConstructorCall;
  
    constructor(call: ConstructorCall) {
      this._call = call;
    }
  }
  
  export class DischargeCall extends ethereum.Call {
    get inputs(): DischargeCall__Inputs {
      return new DischargeCall__Inputs(this);
    }
  
    get outputs(): DischargeCall__Outputs {
      return new DischargeCall__Outputs(this);
    }
  }
  
  export class DischargeCall__Inputs {
    _call: DischargeCall;
  
    constructor(call: DischargeCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get creatorRedirect(): Address {
      return this._call.inputValues[4].value.toAddress();
    }
  }
  
  export class DischargeCall__Outputs {
    _call: DischargeCall;
  
    constructor(call: DischargeCall) {
      this._call = call;
    }
  
    get creatorAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  }
  
  export class DischargeAmountCall extends ethereum.Call {
    get inputs(): DischargeAmountCall__Inputs {
      return new DischargeAmountCall__Inputs(this);
    }
  
    get outputs(): DischargeAmountCall__Outputs {
      return new DischargeAmountCall__Outputs(this);
    }
  }
  
  export class DischargeAmountCall__Inputs {
    _call: DischargeAmountCall;
  
    constructor(call: DischargeAmountCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get assetAmount(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  
    get creatorRedirect(): Address {
      return this._call.inputValues[5].value.toAddress();
    }
  }
  
  export class DischargeAmountCall__Outputs {
    _call: DischargeAmountCall;
  
    constructor(call: DischargeAmountCall) {
      this._call = call;
    }
  
    get creatorAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  }
  
  export class DischargeAmountForCreatorCall extends ethereum.Call {
    get inputs(): DischargeAmountForCreatorCall__Inputs {
      return new DischargeAmountForCreatorCall__Inputs(this);
    }
  
    get outputs(): DischargeAmountForCreatorCall__Outputs {
      return new DischargeAmountForCreatorCall__Outputs(this);
    }
  }
  
  export class DischargeAmountForCreatorCall__Inputs {
    _call: DischargeAmountForCreatorCall;
  
    constructor(call: DischargeAmountForCreatorCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get creator(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[4].value.toAddress();
    }
  
    get assetAmount(): BigInt {
      return this._call.inputValues[5].value.toBigInt();
    }
  }
  
  export class DischargeAmountForCreatorCall__Outputs {
    _call: DischargeAmountForCreatorCall;
  
    constructor(call: DischargeAmountForCreatorCall) {
      this._call = call;
    }
  
    get receiverAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  
  export class EnergizeCall extends ethereum.Call {
    get inputs(): EnergizeCall__Inputs {
      return new EnergizeCall__Inputs(this);
    }
  
    get outputs(): EnergizeCall__Outputs {
      return new EnergizeCall__Outputs(this);
    }
  }
  
  export class EnergizeCall__Inputs {
    _call: EnergizeCall;
  
    constructor(call: EnergizeCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get assetAmount(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  }
  
  export class EnergizeCall__Outputs {
    _call: EnergizeCall;
  
    constructor(call: EnergizeCall) {
      this._call = call;
    }
  
    get yieldTokensAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  
  export class ExecuteForAccountCall extends ethereum.Call {
    get inputs(): ExecuteForAccountCall__Inputs {
      return new ExecuteForAccountCall__Inputs(this);
    }
  
    get outputs(): ExecuteForAccountCall__Outputs {
      return new ExecuteForAccountCall__Outputs(this);
    }
  }
  
  export class ExecuteForAccountCall__Inputs {
    _call: ExecuteForAccountCall;
  
    constructor(call: ExecuteForAccountCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get externalAddress(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get ethValue(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  
    get encodedParams(): Bytes {
      return this._call.inputValues[4].value.toBytes();
    }
  }
  
  export class ExecuteForAccountCall__Outputs {
    _call: ExecuteForAccountCall;
  
    constructor(call: ExecuteForAccountCall) {
      this._call = call;
    }
  
    get value0(): Bytes {
      return this._call.outputValues[0].value.toBytes();
    }
  }
  
  export class GetInterestCall extends ethereum.Call {
    get inputs(): GetInterestCall__Inputs {
      return new GetInterestCall__Inputs(this);
    }
  
    get outputs(): GetInterestCall__Outputs {
      return new GetInterestCall__Outputs(this);
    }
  }
  
  export class GetInterestCall__Inputs {
    _call: GetInterestCall;
  
    constructor(call: GetInterestCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class GetInterestCall__Outputs {
    _call: GetInterestCall;
  
    constructor(call: GetInterestCall) {
      this._call = call;
    }
  
    get creatorInterest(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get ownerInterest(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  }
  
  export class GetPrincipalCall extends ethereum.Call {
    get inputs(): GetPrincipalCall__Inputs {
      return new GetPrincipalCall__Inputs(this);
    }
  
    get outputs(): GetPrincipalCall__Outputs {
      return new GetPrincipalCall__Outputs(this);
    }
  }
  
  export class GetPrincipalCall__Inputs {
    _call: GetPrincipalCall;
  
    constructor(call: GetPrincipalCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class GetPrincipalCall__Outputs {
    _call: GetPrincipalCall;
  
    constructor(call: GetPrincipalCall) {
      this._call = call;
    }
  
    get value0(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  
  export class GetRewardsCall extends ethereum.Call {
    get inputs(): GetRewardsCall__Inputs {
      return new GetRewardsCall__Inputs(this);
    }
  
    get outputs(): GetRewardsCall__Outputs {
      return new GetRewardsCall__Outputs(this);
    }
  }
  
  export class GetRewardsCall__Inputs {
    _call: GetRewardsCall;
  
    constructor(call: GetRewardsCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get _rewardToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class GetRewardsCall__Outputs {
    _call: GetRewardsCall;
  
    constructor(call: GetRewardsCall) {
      this._call = call;
    }
  
    get value0(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  
  export class GetTotalCall extends ethereum.Call {
    get inputs(): GetTotalCall__Inputs {
      return new GetTotalCall__Inputs(this);
    }
  
    get outputs(): GetTotalCall__Outputs {
      return new GetTotalCall__Outputs(this);
    }
  }
  
  export class GetTotalCall__Inputs {
    _call: GetTotalCall;
  
    constructor(call: GetTotalCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class GetTotalCall__Outputs {
    _call: GetTotalCall;
  
    constructor(call: GetTotalCall) {
      this._call = call;
    }
  
    get value0(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  
  export class GetWalletAddressByIdCall extends ethereum.Call {
    get inputs(): GetWalletAddressByIdCall__Inputs {
      return new GetWalletAddressByIdCall__Inputs(this);
    }
  
    get outputs(): GetWalletAddressByIdCall__Outputs {
      return new GetWalletAddressByIdCall__Outputs(this);
    }
  }
  
  export class GetWalletAddressByIdCall__Inputs {
    _call: GetWalletAddressByIdCall;
  
    constructor(call: GetWalletAddressByIdCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get value2(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get value3(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  }
  
  export class GetWalletAddressByIdCall__Outputs {
    _call: GetWalletAddressByIdCall;
  
    constructor(call: GetWalletAddressByIdCall) {
      this._call = call;
    }
  
    get value0(): Address {
      return this._call.outputValues[0].value.toAddress();
    }
  }
  
  export class RefreshPrincipalCall extends ethereum.Call {
    get inputs(): RefreshPrincipalCall__Inputs {
      return new RefreshPrincipalCall__Inputs(this);
    }
  
    get outputs(): RefreshPrincipalCall__Outputs {
      return new RefreshPrincipalCall__Outputs(this);
    }
  }
  
  export class RefreshPrincipalCall__Inputs {
    _call: RefreshPrincipalCall;
  
    constructor(call: RefreshPrincipalCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class RefreshPrincipalCall__Outputs {
    _call: RefreshPrincipalCall;
  
    constructor(call: RefreshPrincipalCall) {
      this._call = call;
    }
  }
  
  export class ReleaseCall extends ethereum.Call {
    get inputs(): ReleaseCall__Inputs {
      return new ReleaseCall__Inputs(this);
    }
  
    get outputs(): ReleaseCall__Outputs {
      return new ReleaseCall__Outputs(this);
    }
  }
  
  export class ReleaseCall__Inputs {
    _call: ReleaseCall;
  
    constructor(call: ReleaseCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get creatorRedirect(): Address {
      return this._call.inputValues[4].value.toAddress();
    }
  }
  
  export class ReleaseCall__Outputs {
    _call: ReleaseCall;
  
    constructor(call: ReleaseCall) {
      this._call = call;
    }
  
    get principalAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get creatorAmount(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._call.outputValues[2].value.toBigInt();
    }
  }
  
  export class ReleaseAmountCall extends ethereum.Call {
    get inputs(): ReleaseAmountCall__Inputs {
      return new ReleaseAmountCall__Inputs(this);
    }
  
    get outputs(): ReleaseAmountCall__Outputs {
      return new ReleaseAmountCall__Outputs(this);
    }
  }
  
  export class ReleaseAmountCall__Inputs {
    _call: ReleaseAmountCall;
  
    constructor(call: ReleaseAmountCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get assetToken(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get assetAmount(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  
    get creatorRedirect(): Address {
      return this._call.inputValues[5].value.toAddress();
    }
  }
  
  export class ReleaseAmountCall__Outputs {
    _call: ReleaseAmountCall;
  
    constructor(call: ReleaseAmountCall) {
      this._call = call;
    }
  
    get principalAmount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get creatorAmount(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  
    get receiverAmount(): BigInt {
      return this._call.outputValues[2].value.toBigInt();
    }
  }
  
  export class RenounceOwnershipCall extends ethereum.Call {
    get inputs(): RenounceOwnershipCall__Inputs {
      return new RenounceOwnershipCall__Inputs(this);
    }
  
    get outputs(): RenounceOwnershipCall__Outputs {
      return new RenounceOwnershipCall__Outputs(this);
    }
  }
  
  export class RenounceOwnershipCall__Inputs {
    _call: RenounceOwnershipCall;
  
    constructor(call: RenounceOwnershipCall) {
      this._call = call;
    }
  }
  
  export class RenounceOwnershipCall__Outputs {
    _call: RenounceOwnershipCall;
  
    constructor(call: RenounceOwnershipCall) {
      this._call = call;
    }
  }
  
  export class SetAaveBridgeCall extends ethereum.Call {
    get inputs(): SetAaveBridgeCall__Inputs {
      return new SetAaveBridgeCall__Inputs(this);
    }
  
    get outputs(): SetAaveBridgeCall__Outputs {
      return new SetAaveBridgeCall__Outputs(this);
    }
  }
  
  export class SetAaveBridgeCall__Inputs {
    _call: SetAaveBridgeCall;
  
    constructor(call: SetAaveBridgeCall) {
      this._call = call;
    }
  
    get aaveBridge(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  }
  
  export class SetAaveBridgeCall__Outputs {
    _call: SetAaveBridgeCall;
  
    constructor(call: SetAaveBridgeCall) {
      this._call = call;
    }
  }
  
  export class SetChargedSettingsCall extends ethereum.Call {
    get inputs(): SetChargedSettingsCall__Inputs {
      return new SetChargedSettingsCall__Inputs(this);
    }
  
    get outputs(): SetChargedSettingsCall__Outputs {
      return new SetChargedSettingsCall__Outputs(this);
    }
  }
  
  export class SetChargedSettingsCall__Inputs {
    _call: SetChargedSettingsCall;
  
    constructor(call: SetChargedSettingsCall) {
      this._call = call;
    }
  
    get settings(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  }
  
  export class SetChargedSettingsCall__Outputs {
    _call: SetChargedSettingsCall;
  
    constructor(call: SetChargedSettingsCall) {
      this._call = call;
    }
  }
  
  export class SetControllerCall extends ethereum.Call {
    get inputs(): SetControllerCall__Inputs {
      return new SetControllerCall__Inputs(this);
    }
  
    get outputs(): SetControllerCall__Outputs {
      return new SetControllerCall__Outputs(this);
    }
  }
  
  export class SetControllerCall__Inputs {
    _call: SetControllerCall;
  
    constructor(call: SetControllerCall) {
      this._call = call;
    }
  
    get controller(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  }
  
  export class SetControllerCall__Outputs {
    _call: SetControllerCall;
  
    constructor(call: SetControllerCall) {
      this._call = call;
    }
  }
  
  export class SetExecutorCall extends ethereum.Call {
    get inputs(): SetExecutorCall__Inputs {
      return new SetExecutorCall__Inputs(this);
    }
  
    get outputs(): SetExecutorCall__Outputs {
      return new SetExecutorCall__Outputs(this);
    }
  }
  
  export class SetExecutorCall__Inputs {
    _call: SetExecutorCall;
  
    constructor(call: SetExecutorCall) {
      this._call = call;
    }
  
    get executor(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  }
  
  export class SetExecutorCall__Outputs {
    _call: SetExecutorCall;
  
    constructor(call: SetExecutorCall) {
      this._call = call;
    }
  }
  
  export class SetPausedStateCall extends ethereum.Call {
    get inputs(): SetPausedStateCall__Inputs {
      return new SetPausedStateCall__Inputs(this);
    }
  
    get outputs(): SetPausedStateCall__Outputs {
      return new SetPausedStateCall__Outputs(this);
    }
  }
  
  export class SetPausedStateCall__Inputs {
    _call: SetPausedStateCall;
  
    constructor(call: SetPausedStateCall) {
      this._call = call;
    }
  
    get paused(): boolean {
      return this._call.inputValues[0].value.toBoolean();
    }
  }
  
  export class SetPausedStateCall__Outputs {
    _call: SetPausedStateCall;
  
    constructor(call: SetPausedStateCall) {
      this._call = call;
    }
  }
  
  export class SetReferralCodeCall extends ethereum.Call {
    get inputs(): SetReferralCodeCall__Inputs {
      return new SetReferralCodeCall__Inputs(this);
    }
  
    get outputs(): SetReferralCodeCall__Outputs {
      return new SetReferralCodeCall__Outputs(this);
    }
  }
  
  export class SetReferralCodeCall__Inputs {
    _call: SetReferralCodeCall;
  
    constructor(call: SetReferralCodeCall) {
      this._call = call;
    }
  
    get referralCode(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  }
  
  export class SetReferralCodeCall__Outputs {
    _call: SetReferralCodeCall;
  
    constructor(call: SetReferralCodeCall) {
      this._call = call;
    }
  }
  
  export class SetValidRewardsTokenCall extends ethereum.Call {
    get inputs(): SetValidRewardsTokenCall__Inputs {
      return new SetValidRewardsTokenCall__Inputs(this);
    }
  
    get outputs(): SetValidRewardsTokenCall__Outputs {
      return new SetValidRewardsTokenCall__Outputs(this);
    }
  }
  
  export class SetValidRewardsTokenCall__Inputs {
    _call: SetValidRewardsTokenCall;
  
    constructor(call: SetValidRewardsTokenCall) {
      this._call = call;
    }
  
    get rewardsToken(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get state(): boolean {
      return this._call.inputValues[1].value.toBoolean();
    }
  }
  
  export class SetValidRewardsTokenCall__Outputs {
    _call: SetValidRewardsTokenCall;
  
    constructor(call: SetValidRewardsTokenCall) {
      this._call = call;
    }
  }
  
  export class TransferOwnershipCall extends ethereum.Call {
    get inputs(): TransferOwnershipCall__Inputs {
      return new TransferOwnershipCall__Inputs(this);
    }
  
    get outputs(): TransferOwnershipCall__Outputs {
      return new TransferOwnershipCall__Outputs(this);
    }
  }
  
  export class TransferOwnershipCall__Inputs {
    _call: TransferOwnershipCall;
  
    constructor(call: TransferOwnershipCall) {
      this._call = call;
    }
  
    get newOwner(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  }
  
  export class TransferOwnershipCall__Outputs {
    _call: TransferOwnershipCall;
  
    constructor(call: TransferOwnershipCall) {
      this._call = call;
    }
  }
  
  export class WithdrawERC20Call extends ethereum.Call {
    get inputs(): WithdrawERC20Call__Inputs {
      return new WithdrawERC20Call__Inputs(this);
    }
  
    get outputs(): WithdrawERC20Call__Outputs {
      return new WithdrawERC20Call__Outputs(this);
    }
  }
  
  export class WithdrawERC20Call__Inputs {
    _call: WithdrawERC20Call;
  
    constructor(call: WithdrawERC20Call) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get receiver(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get tokenAddress(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  }
  
  export class WithdrawERC20Call__Outputs {
    _call: WithdrawERC20Call;
  
    constructor(call: WithdrawERC20Call) {
      this._call = call;
    }
  }
  
  export class WithdrawERC721Call extends ethereum.Call {
    get inputs(): WithdrawERC721Call__Inputs {
      return new WithdrawERC721Call__Inputs(this);
    }
  
    get outputs(): WithdrawERC721Call__Outputs {
      return new WithdrawERC721Call__Outputs(this);
    }
  }
  
  export class WithdrawERC721Call__Inputs {
    _call: WithdrawERC721Call;
  
    constructor(call: WithdrawERC721Call) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get receiver(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get nftTokenAddress(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get nftTokenId(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  }
  
  export class WithdrawERC721Call__Outputs {
    _call: WithdrawERC721Call;
  
    constructor(call: WithdrawERC721Call) {
      this._call = call;
    }
  }
  
  export class WithdrawEtherCall extends ethereum.Call {
    get inputs(): WithdrawEtherCall__Inputs {
      return new WithdrawEtherCall__Inputs(this);
    }
  
    get outputs(): WithdrawEtherCall__Outputs {
      return new WithdrawEtherCall__Outputs(this);
    }
  }
  
  export class WithdrawEtherCall__Inputs {
    _call: WithdrawEtherCall;
  
    constructor(call: WithdrawEtherCall) {
      this._call = call;
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get receiver(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  }
  
  export class WithdrawEtherCall__Outputs {
    _call: WithdrawEtherCall;
  
    constructor(call: WithdrawEtherCall) {
      this._call = call;
    }
  }
  
  export class WithdrawRewardsCall extends ethereum.Call {
    get inputs(): WithdrawRewardsCall__Inputs {
      return new WithdrawRewardsCall__Inputs(this);
    }
  
    get outputs(): WithdrawRewardsCall__Outputs {
      return new WithdrawRewardsCall__Outputs(this);
    }
  }
  
  export class WithdrawRewardsCall__Inputs {
    _call: WithdrawRewardsCall;
  
    constructor(call: WithdrawRewardsCall) {
      this._call = call;
    }
  
    get receiver(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get contractAddress(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get tokenId(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get rewardsToken(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  
    get rewardsAmount(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  }
  
  export class WithdrawRewardsCall__Outputs {
    _call: WithdrawRewardsCall;
  
    constructor(call: WithdrawRewardsCall) {
      this._call = call;
    }
  
    get amount(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  }
  